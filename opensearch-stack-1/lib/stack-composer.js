"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StackComposer = void 0;
const opensearch_domain_stack_1 = require("./opensearch-domain-stack");
const network_stack_1 = require("./network-stack");
const kinesis_firehose_app_stack_1 = require("./kinesis-firehose-app-stack");
const config_1 = require("./config");
const validator_1 = require("./config/validator");
class StackComposer {
    stacks = [];
    constructor(scope, props) {
        const config = config_1.ConfigManager.loadConfiguration(scope, props.stage);
        const validator = new validator_1.ConfigValidator();
        const parsedConfig = validator.validateAndTransformConfig(config);
        let networkStack;
        // If enabled re-use existing VPC and/or associated resources or create new
        if (config.network.vpcEnabled) {
            networkStack = new network_stack_1.NetworkStack(scope, 'networkStack', {
                vpcId: config.network.vpcId,
                vpcSubnetIds: config.network.vpcSubnetIds,
                vpcSecurityGroupIds: config.network.vpcSecurityGroupIds,
                availabilityZoneCount: config.network.availabilityZoneCount,
                stackName: `OSServiceNetworkCDKStack-${config.openSearch.domainName}`,
                description: "This stack contains resources to create/manage networking for an OpenSearch Service domain",
                ...props,
            });
            this.stacks.push(networkStack);
        }
        const opensearchStack = new opensearch_domain_stack_1.OpenSearchDomainStack(scope, 'opensearchServiceDomainCdkStack', {
            version: parsedConfig.version,
            domainName: parsedConfig.domainName,
            dataNodeInstanceType: parsedConfig.dataNodeType,
            dataNodes: parsedConfig.dataNodeCount,
            dedicatedManagerNodeType: parsedConfig.dedicatedManagerNodeType,
            dedicatedManagerNodeCount: parsedConfig.dedicatedManagerNodeCount,
            warmInstanceType: parsedConfig.warmNodeType,
            warmNodes: parsedConfig.warmNodeCount,
            ebsEnabled: parsedConfig.ebsEnabled,
            ebsIops: parsedConfig.ebsIops,
            ebsVolumeSize: parsedConfig.ebsVolumeSize,
            ebsVolumeType: parsedConfig.ebsVolumeType,
            vpc: networkStack ? networkStack.vpc : undefined,
            vpcSubnets: networkStack ? networkStack.domainSubnets : undefined,
            vpcSecurityGroups: networkStack ? networkStack.domainSecurityGroups : undefined,
            availabilityZoneCount: parsedConfig.availabilityZoneCount,
            stackName: `OSServiceDomainCDKStack-${parsedConfig.domainName}`,
            description: "This stack contains an OpenSearch Service domain",
            ...props,
        });
        this.stacks.push(opensearchStack);
        // Create Firehose stacks for each app type configuration
        config.logs.appTypeConfigs.forEach((appTypeConfig, index) => {
            // Clean app type name for CDK naming (replace underscores with dashes, capitalize words)
            const cleanAppType = appTypeConfig.appType.replace(/_/g, '-');
            const capitalizedAppType = cleanAppType.split('-').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join('');
            const appFirehoseStack = new kinesis_firehose_app_stack_1.KinesisFirehoseAppStack(scope, `kinesisFirehose${capitalizedAppType}Stack`, {
                opensearchDomain: opensearchStack.domain,
                opensearchStackName: opensearchStack.stackName,
                appTypeConfig: appTypeConfig,
                stackName: `KinesisFirehose${capitalizedAppType}CDKStack-${parsedConfig.domainName}`,
                description: `This stack contains Kinesis Data Firehose delivery streams for ${appTypeConfig.appType} logs`,
                ...props,
            });
            this.stacks.push(appFirehoseStack);
        });
    }
}
exports.StackComposer = StackComposer;
//# sourceMappingURL=data:application/json;base64,