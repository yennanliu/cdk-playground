"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfigParser = void 0;
const validator_1 = require("./validator");
class ConfigParser {
    static parse(scope, stage, defaults) {
        const validator = new validator_1.ConfigValidator();
        const domainName = this.getContextForType(scope, 'domainName', 'string', defaults);
        const engineVersion = this.getContextForType(scope, 'engineVersion', 'string', defaults);
        const dataNodeType = this.getContextForType(scope, 'dataNodeType', 'string', defaults);
        const dataNodeCount = this.getContextForType(scope, 'dataNodeCount', 'number', defaults);
        const dedicatedManagerNodeType = this.getContextForType(scope, 'dedicatedManagerNodeType', 'string', defaults);
        const dedicatedManagerNodeCount = this.getContextForType(scope, 'dedicatedManagerNodeCount', 'number', defaults);
        const warmNodeType = this.getContextForType(scope, 'warmNodeType', 'string', defaults);
        const warmNodeCount = this.getContextForType(scope, 'warmNodeCount', 'number', defaults);
        const ebsEnabled = this.getContextForType(scope, 'ebsEnabled', 'boolean', defaults);
        const ebsIops = this.getContextForType(scope, 'ebsIops', 'number', defaults);
        const ebsVolumeSize = this.getContextForType(scope, 'ebsVolumeSize', 'number', defaults);
        const ebsVolumeType = this.getContextForType(scope, 'ebsVolumeType', 'string', defaults);
        const vpcEnabled = this.getContextForType(scope, 'vpcEnabled', 'boolean', defaults);
        const vpcId = this.getContextForType(scope, 'vpcId', 'string', defaults);
        const vpcSubnetIds = this.getContextForType(scope, 'vpcSubnetIds', 'object', defaults);
        const vpcSecurityGroupIds = this.getContextForType(scope, 'vpcSecurityGroupIds', 'object', defaults);
        const availabilityZoneCount = this.getContextForType(scope, 'availabilityZoneCount', 'number', defaults);
        const services = this.getContextForType(scope, 'services', 'object', defaults);
        validator.validateRequired(domainName, 'domainName');
        validator.validateEngineVersion(engineVersion);
        validator.validateEbsVolumeType(ebsVolumeType);
        return {
            openSearch: {
                domainName: domainName,
                engineVersion: engineVersion,
                dataNodeType: dataNodeType || 't3.small.search',
                dataNodeCount: dataNodeCount || 1,
                dedicatedManagerNodeType,
                dedicatedManagerNodeCount,
                warmNodeType,
                warmNodeCount,
                ebsEnabled: ebsEnabled !== undefined ? ebsEnabled : true,
                ebsIops,
                ebsVolumeSize: ebsVolumeSize || 10,
                ebsVolumeType,
                availabilityZoneCount: availabilityZoneCount || 1,
            },
            network: {
                vpcEnabled: vpcEnabled || false,
                vpcId,
                vpcSubnetIds,
                vpcSecurityGroupIds,
                availabilityZoneCount: availabilityZoneCount || 1,
            },
            logs: {
                services: this.parseServices(services, defaults.services),
            },
            stage,
        };
    }
    static getContextForType(scope, optionName, expectedType, defaultValues) {
        const option = scope.node.tryGetContext(optionName);
        // If no context is provided (undefined or empty string) and a default value exists, use it
        if ((option === undefined || option === "") && defaultValues[optionName]) {
            return defaultValues[optionName];
        }
        // Filter out invalid or missing options by setting undefined (empty strings, null, undefined, NaN)
        if (option !== false && option !== 0 && !option) {
            return undefined;
        }
        // Values provided by the CLI will always be represented as a string and need to be parsed
        if (typeof option === 'string') {
            if (expectedType === 'number') {
                const parsed = parseInt(option);
                if (isNaN(parsed)) {
                    throw new Error(`Invalid number format for ${optionName}: ${option}`);
                }
                return parsed;
            }
            if (expectedType === 'boolean' || expectedType === 'object') {
                try {
                    return JSON.parse(option);
                }
                catch (error) {
                    throw new Error(`Invalid JSON format for ${optionName}: ${option}`);
                }
            }
        }
        // Values provided by the cdk.context.json should be of the desired type
        if (typeof option !== expectedType) {
            throw new Error(`Type provided by cdk.context.json for ${optionName} was ${typeof option} but expected ${expectedType}`);
        }
        return option;
    }
    static parseServices(contextServices, defaultServices) {
        const services = {};
        // Parse services from context
        if (contextServices && typeof contextServices === 'object') {
            Object.entries(contextServices).forEach(([serviceName, serviceConfig]) => {
                if (typeof serviceConfig === 'object' && serviceConfig !== null) {
                    const config = serviceConfig;
                    services[serviceName] = {
                        logGroupName: config.logGroupName || '',
                        indexName: config.indexName || `${serviceName}-logs`,
                        processorType: config.processorType || serviceName,
                        enabled: config.enabled !== false
                    };
                }
            });
        }
        // Merge with default services
        if (defaultServices) {
            Object.entries(defaultServices).forEach(([serviceName, defaultConfig]) => {
                if (!services[serviceName] && defaultConfig.logGroupName) {
                    services[serviceName] = {
                        logGroupName: defaultConfig.logGroupName,
                        indexName: defaultConfig.indexName || `${serviceName}-logs`,
                        processorType: defaultConfig.processorType || serviceName,
                        enabled: defaultConfig.enabled !== false
                    };
                }
            });
        }
        return services;
    }
}
exports.ConfigParser = ConfigParser;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFyc2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicGFyc2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUVBLDJDQUE4QztBQUU5QyxNQUFhLFlBQVk7SUFFckIsTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFnQixFQUFFLEtBQWEsRUFBRSxRQUEyQjtRQUNyRSxNQUFNLFNBQVMsR0FBRyxJQUFJLDJCQUFlLEVBQUUsQ0FBQztRQUV4QyxNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQUMsS0FBSyxFQUFFLFlBQVksRUFBRSxRQUFRLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDbkYsTUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEtBQUssRUFBRSxlQUFlLEVBQUUsUUFBUSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQ3pGLE1BQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLEVBQUUsY0FBYyxFQUFFLFFBQVEsRUFBRSxRQUFRLENBQUMsQ0FBQztRQUN2RixNQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQUMsS0FBSyxFQUFFLGVBQWUsRUFBRSxRQUFRLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDekYsTUFBTSx3QkFBd0IsR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQUMsS0FBSyxFQUFFLDBCQUEwQixFQUFFLFFBQVEsRUFBRSxRQUFRLENBQUMsQ0FBQztRQUMvRyxNQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLEVBQUUsMkJBQTJCLEVBQUUsUUFBUSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQ2pILE1BQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLEVBQUUsY0FBYyxFQUFFLFFBQVEsRUFBRSxRQUFRLENBQUMsQ0FBQztRQUN2RixNQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQUMsS0FBSyxFQUFFLGVB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RSxhQUFhLENBQUMsWUFBWTt3QkFDeEMsU0FBUyxFQUFFLGFBQWEsQ0FBQyxTQUFTLElBQUksR0FBRyxXQUFXLE9BQU87d0JBQzNELGFBQWEsRUFBRSxhQUFhLENBQUMsYUFBYSxJQUFJLFdBQVc7d0JBQ3pELE9BQU8sRUFBRSxhQUFhLENBQUMsT0FBTyxLQUFLLEtBQUs7cUJBQzNDLENBQUM7Z0JBQ04sQ0FBQztZQUNMLENBQUMsQ0FBQyxDQUFDO1FBQ1AsQ0FBQztRQUVELE9BQU8sUUFBUSxDQUFDO0lBQ3BCLENBQUM7Q0FDSjtBQXhJRCxvQ0F3SUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tIFwiY29uc3RydWN0c1wiO1xuaW1wb3J0IHsgUmF3Q29uZmlnRGVmYXVsdHMsIFN0YWNrQ29uZmlndXJhdGlvbiwgU2VydmljZUxvZ0NvbmZpZywgUmF3U2VydmljZUxvZ0NvbmZpZyB9IGZyb20gXCIuL3R5cGVzXCI7XG5pbXBvcnQgeyBDb25maWdWYWxpZGF0b3IgfSBmcm9tIFwiLi92YWxpZGF0b3JcIjtcblxuZXhwb3J0IGNsYXNzIENvbmZpZ1BhcnNlciB7XG4gICAgXG4gICAgc3RhdGljIHBhcnNlKHNjb3BlOiBDb25zdHJ1Y3QsIHN0YWdlOiBzdHJpbmcsIGRlZmF1bHRzOiBSYXdDb25maWdEZWZhdWx0cyk6IFN0YWNrQ29uZmlndXJhdGlvbiB7XG4gICAgICAgIGNvbnN0IHZhbGlkYXRvciA9IG5ldyBDb25maWdWYWxpZGF0b3IoKTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGRvbWFpbk5hbWUgPSB0aGlzLmdldENvbnRleHRGb3JUeXBlKHNjb3BlLCAnZG9tYWluTmFtZScsICdzdHJpbmcnLCBkZWZhdWx0cyk7XG4gICAgICAgIGNvbnN0IGVuZ2luZVZlcnNpb24gPSB0aGlzLmdldENvbnRleHRGb3JUeXBlKHNjb3BlLCAnZW5naW5lVmVyc2lvbicsICdzdHJpbmcnLCBkZWZhdWx0cyk7XG4gICAgICAgIGNvbnN0IGRhdGFOb2RlVHlwZSA9IHRoaXMuZ2V0Q29udGV4dEZvclR5cGUoc2NvcGUsICdkYXRhTm9kZVR5cGUnLCAnc3RyaW5nJywgZGVmYXVsdHMpO1xuICAgICAgICBjb25zdCBkYXRhTm9kZUNvdW50ID0gdGhpcy5nZXRDb250ZXh0Rm9yVHlwZShzY29wZSwgJ2RhdGFOb2RlQ291bnQnLCAnbnVtYmVyJywgZGVmYXVsdHMpO1xuICAgICAgICBjb25zdCBkZWRpY2F0ZWRNYW5hZ2VyTm9kZVR5cGUgPSB0aGlzLmdldENvbnRleHRGb3JUeXBlKHNjb3BlLCAnZGVkaWNhdGVkTWFuYWdlck5vZGVUeXBlJywgJ3N0cmluZycsIGRlZmF1bHRzKTtcbiAgICAgICAgY29uc3QgZGVkaWNhdGVkTWFuYWdlck5vZGVDb3VudCA9IHRoaXMuZ2V0Q29udGV4dEZvclR5cGUoc2NvcGUsICdkZWRpY2F0ZWRNYW5hZ2VyTm9kZUNvdW50JywgJ251bWJlcicsIGRlZmF1bHRzKTtcbiAgICAgICAgY29uc3Qgd2FybU5vZGVUeXBlID0gdGhpcy5nZXRDb250ZXh0Rm9yVHlwZShzY29wZSwgJ3dhcm1Ob2RlVHlwZScsICdzdHJpbmcnLCBkZWZhdWx0cyk7XG4gICAgICAgIGNvbnN0IHdhcm1Ob2RlQ291bnQgPSB0aGlzLmdldENvbnRleHRGb3JUeXBlKHNjb3BlLCAnd2FybU5vZGVDb3VudCcsICdudW1iZXInLCBkZWZhdWx0cyk7XG4gICAgICAgIGNvbnN0IGVic0VuYWJsZWQgPSB0aGlzLmdldENvbnRleHRGb3JUeXBlKHNjb3BlLCAnZWJzRW5hYmxlZCcsICdib29sZWFuJywgZGVmYXVsdHMpO1xuICAgICAgICBjb25zdCBlYnNJb3BzID0gdGhpcy5nZXRDb250ZXh0Rm9yVHlwZShzY29wZSwgJ2Vic0lvcHMnLCAnbnVtYmVyJywgZGVmYXVsdHMpO1xuICAgICAgICBjb25zdCBlYnNWb2x1bWVTaXplID0gdGhpcy5nZXRDb250ZXh0Rm9yVHlwZShzY29wZSwgJ2Vic1ZvbHVtZVNpemUnLCAnbnVtYmVyJywgZGVmYXVsdHMpO1xuICAgICAgICBjb25zdCBlYnNWb2x1bWVUeXBlID0gdGhpcy5nZXRDb250ZXh0Rm9yVHlwZShzY29wZSwgJ2Vic1ZvbHVtZVR5cGUnLCAnc3RyaW5nJywgZGVmYXVsdHMpO1xuICAgICAgICBjb25zdCB2cGNFbmFibGVkID0gdGhpcy5nZXRDb250ZXh0Rm9yVHlwZShzY29wZSwgJ3ZwY0VuYWJsZWQnLCAnYm9vbGVhbicsIGRlZmF1bHRzKTtcbiAgICAgICAgY29uc3QgdnBjSWQgPSB0aGlzLmdldENvbnRleHRGb3JUeXBlKHNjb3BlLCAndnBjSWQnLCAnc3RyaW5nJywgZGVmYXVsdHMpO1xuICAgICAgICBjb25zdCB2cGNTdWJuZXRJZHMgPSB0aGlzLmdldENvbnRleHRGb3JUeXBlKHNjb3BlLCAndnBjU3VibmV0SWRzJywgJ29iamVjdCcsIGRlZmF1bHRzKTtcbiAgICAgICAgY29uc3QgdnBjU2VjdXJpdHlHcm91cElkcyA9IHRoaXMuZ2V0Q29udGV4dEZvclR5cGUoc2NvcGUsICd2cGNTZWN1cml0eUdyb3VwSWRzJywgJ29iamVjdCcsIGRlZmF1bHRzKTtcbiAgICAgICAgY29uc3QgYXZhaWxhYmlsaXR5Wm9uZUNvdW50ID0gdGhpcy5nZXRDb250ZXh0Rm9yVHlwZShzY29wZSwgJ2F2YWlsYWJpbGl0eVpvbmVDb3VudCcsICdudW1iZXInLCBkZWZhdWx0cyk7XG4gICAgICAgIGNvbnN0IHNlcnZpY2VzID0gdGhpcy5nZXRDb250ZXh0Rm9yVHlwZShzY29wZSwgJ3NlcnZpY2VzJywgJ29iamVjdCcsIGRlZmF1bHRzKTtcblxuICAgICAgICB2YWxpZGF0b3IudmFsaWRhdGVSZXF1aXJlZChkb21haW5OYW1lLCAnZG9tYWluTmFtZScpO1xuICAgICAgICB2YWxpZGF0b3IudmFsaWRhdGVFbmdpbmVWZXJzaW9uKGVuZ2luZVZlcnNpb24pO1xuICAgICAgICB2YWxpZGF0b3IudmFsaWRhdGVFYnNWb2x1bWVUeXBlKGVic1ZvbHVtZVR5cGUpO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBvcGVuU2VhcmNoOiB7XG4gICAgICAgICAgICAgICAgZG9tYWluTmFtZTogZG9tYWluTmFtZSEsXG4gICAgICAgICAgICAgICAgZW5naW5lVmVyc2lvbjogZW5naW5lVmVyc2lvbiEsXG4gICAgICAgICAgICAgICAgZGF0YU5vZGVUeXBlOiBkYXRhTm9kZVR5cGUgfHwgJ3QzLnNtYWxsLnNlYXJjaCcsXG4gICAgICAgICAgICAgICAgZGF0YU5vZGVDb3VudDogZGF0YU5vZGVDb3VudCB8fCAxLFxuICAgICAgICAgICAgICAgIGRlZGljYXRlZE1hbmFnZXJOb2RlVHlwZSxcbiAgICAgICAgICAgICAgICBkZWRpY2F0ZWRNYW5hZ2VyTm9kZUNvdW50LFxuICAgICAgICAgICAgICAgIHdhcm1Ob2RlVHlwZSxcbiAgICAgICAgICAgICAgICB3YXJtTm9kZUNvdW50LFxuICAgICAgICAgICAgICAgIGVic0VuYWJsZWQ6IGVic0VuYWJsZWQgIT09IHVuZGVmaW5lZCA/IGVic0VuYWJsZWQgOiB0cnVlLFxuICAgICAgICAgICAgICAgIGVic0lvcHMsXG4gICAgICAgICAgICAgICAgZWJzVm9sdW1lU2l6ZTogZWJzVm9sdW1lU2l6ZSB8fCAxMCxcbiAgICAgICAgICAgICAgICBlYnNWb2x1bWVUeXBlLFxuICAgICAgICAgICAgICAgIGF2YWlsYWJpbGl0eVpvbmVDb3VudDogYXZhaWxhYmlsaXR5Wm9uZUNvdW50IHx8IDEsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbmV0d29yazoge1xuICAgICAgICAgICAgICAgIHZwY0VuYWJsZWQ6IHZwY0VuYWJsZWQgfHwgZmFsc2UsXG4gICAgICAgICAgICAgICAgdnBjSWQsXG4gICAgICAgICAgICAgICAgdnBjU3VibmV0SWRzLFxuICAgICAgICAgICAgICAgIHZwY1NlY3VyaXR5R3JvdXBJZHMsXG4gICAgICAgICAgICAgICAgYXZhaWxhYmlsaXR5Wm9uZUNvdW50OiBhdmFpbGFiaWxpdHlab25lQ291bnQgfHwgMSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsb2dzOiB7XG4gICAgICAgICAgICAgICAgc2VydmljZXM6IHRoaXMucGFyc2VTZXJ2aWNlcyhzZXJ2aWNlcywgZGVmYXVsdHMuc2VydmljZXMpLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHN0YWdlLFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHByaXZhdGUgc3RhdGljIGdldENvbnRleHRGb3JUeXBlKFxuICAgICAgICBzY29wZTogQ29uc3RydWN0LCBcbiAgICAgICAgb3B0aW9uTmFtZTogc3RyaW5nLCBcbiAgICAgICAgZXhwZWN0ZWRUeXBlOiBzdHJpbmcsIFxuICAgICAgICBkZWZhdWx0VmFsdWVzOiBSYXdDb25maWdEZWZhdWx0c1xuICAgICk6IGFueSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbiA9IHNjb3BlLm5vZGUudHJ5R2V0Q29udGV4dChvcHRpb25OYW1lKTtcblxuICAgICAgICAvLyBJZiBubyBjb250ZXh0IGlzIHByb3ZpZGVkICh1bmRlZmluZWQgb3IgZW1wdHkgc3RyaW5nKSBhbmQgYSBkZWZhdWx0IHZhbHVlIGV4aXN0cywgdXNlIGl0XG4gICAgICAgIGlmICgob3B0aW9uID09PSB1bmRlZmluZWQgfHwgb3B0aW9uID09PSBcIlwiKSAmJiBkZWZhdWx0VmFsdWVzW29wdGlvbk5hbWUgYXMga2V5b2YgUmF3Q29uZmlnRGVmYXVsdHNdKSB7XG4gICAgICAgICAgICByZXR1cm4gZGVmYXVsdFZhbHVlc1tvcHRpb25OYW1lIGFzIGtleW9mIFJhd0NvbmZpZ0RlZmF1bHRzXTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEZpbHRlciBvdXQgaW52YWxpZCBvciBtaXNzaW5nIG9wdGlvbnMgYnkgc2V0dGluZyB1bmRlZmluZWQgKGVtcHR5IHN0cmluZ3MsIG51bGwsIHVuZGVmaW5lZCwgTmFOKVxuICAgICAgICBpZiAob3B0aW9uICE9PSBmYWxzZSAmJiBvcHRpb24gIT09IDAgJiYgIW9wdGlvbikge1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFZhbHVlcyBwcm92aWRlZCBieSB0aGUgQ0xJIHdpbGwgYWx3YXlzIGJlIHJlcHJlc2VudGVkIGFzIGEgc3RyaW5nIGFuZCBuZWVkIHRvIGJlIHBhcnNlZFxuICAgICAgICBpZiAodHlwZW9mIG9wdGlvbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGlmIChleHBlY3RlZFR5cGUgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcGFyc2VkID0gcGFyc2VJbnQob3B0aW9uKTtcbiAgICAgICAgICAgICAgICBpZiAoaXNOYU4ocGFyc2VkKSkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgbnVtYmVyIGZvcm1hdCBmb3IgJHtvcHRpb25OYW1lfTogJHtvcHRpb259YCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZXhwZWN0ZWRUeXBlID09PSAnYm9vbGVhbicgfHwgZXhwZWN0ZWRUeXBlID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBKU09OLnBhcnNlKG9wdGlvbik7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIEpTT04gZm9ybWF0IGZvciAke29wdGlvbk5hbWV9OiAke29wdGlvbn1gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBWYWx1ZXMgcHJvdmlkZWQgYnkgdGhlIGNkay5jb250ZXh0Lmpzb24gc2hvdWxkIGJlIG9mIHRoZSBkZXNpcmVkIHR5cGVcbiAgICAgICAgaWYgKHR5cGVvZiBvcHRpb24gIT09IGV4cGVjdGVkVHlwZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBUeXBlIHByb3ZpZGVkIGJ5IGNkay5jb250ZXh0Lmpzb24gZm9yICR7b3B0aW9uTmFtZX0gd2FzICR7dHlwZW9mIG9wdGlvbn0gYnV0IGV4cGVjdGVkICR7ZXhwZWN0ZWRUeXBlfWApO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG9wdGlvbjtcbiAgICB9XG5cbiAgICBwcml2YXRlIHN0YXRpYyBwYXJzZVNlcnZpY2VzKGNvbnRleHRTZXJ2aWNlczogYW55LCBkZWZhdWx0U2VydmljZXM/OiB7IFtrZXk6IHN0cmluZ106IFJhd1NlcnZpY2VMb2dDb25maWcgfSk6IHsgW2tleTogc3RyaW5nXTogU2VydmljZUxvZ0NvbmZpZyB9IHtcbiAgICAgICAgY29uc3Qgc2VydmljZXM6IHsgW2tleTogc3RyaW5nXTogU2VydmljZUxvZ0NvbmZpZyB9ID0ge307XG4gICAgICAgIFxuICAgICAgICAvLyBQYXJzZSBzZXJ2aWNlcyBmcm9tIGNvbnRleHRcbiAgICAgICAgaWYgKGNvbnRleHRTZXJ2aWNlcyAmJiB0eXBlb2YgY29udGV4dFNlcnZpY2VzID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgT2JqZWN0LmVudHJpZXMoY29udGV4dFNlcnZpY2VzKS5mb3JFYWNoKChbc2VydmljZU5hbWUsIHNlcnZpY2VDb25maWddKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBzZXJ2aWNlQ29uZmlnID09PSAnb2JqZWN0JyAmJiBzZXJ2aWNlQ29uZmlnICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbmZpZyA9IHNlcnZpY2VDb25maWcgYXMgYW55O1xuICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlc1tzZXJ2aWNlTmFtZV0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsb2dHcm91cE5hbWU6IGNvbmZpZy5sb2dHcm91cE5hbWUgfHwgJycsXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmRleE5hbWU6IGNvbmZpZy5pbmRleE5hbWUgfHwgYCR7c2VydmljZU5hbWV9LWxvZ3NgLFxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvY2Vzc29yVHlwZTogY29uZmlnLnByb2Nlc3NvclR5cGUgfHwgc2VydmljZU5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBlbmFibGVkOiBjb25maWcuZW5hYmxlZCAhPT0gZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIE1lcmdlIHdpdGggZGVmYXVsdCBzZXJ2aWNlc1xuICAgICAgICBpZiAoZGVmYXVsdFNlcnZpY2VzKSB7XG4gICAgICAgICAgICBPYmplY3QuZW50cmllcyhkZWZhdWx0U2VydmljZXMpLmZvckVhY2goKFtzZXJ2aWNlTmFtZSwgZGVmYXVsdENvbmZpZ10pID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIXNlcnZpY2VzW3NlcnZpY2VOYW1lXSAmJiBkZWZhdWx0Q29uZmlnLmxvZ0dyb3VwTmFtZSkge1xuICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlc1tzZXJ2aWNlTmFtZV0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsb2dHcm91cE5hbWU6IGRlZmF1bHRDb25maWcubG9nR3JvdXBOYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXhOYW1lOiBkZWZhdWx0Q29uZmlnLmluZGV4TmFtZSB8fCBgJHtzZXJ2aWNlTmFtZX0tbG9nc2AsXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9jZXNzb3JUeXBlOiBkZWZhdWx0Q29uZmlnLnByb2Nlc3NvclR5cGUgfHwgc2VydmljZU5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBlbmFibGVkOiBkZWZhdWx0Q29uZmlnLmVuYWJsZWQgIT09IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gc2VydmljZXM7XG4gICAgfVxufSJdfQ==