"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const aws_cdk_lib_1 = require("aws-cdk-lib");
const stack_composer_1 = require("../lib/stack-composer");
const network_stack_1 = require("../lib/network-stack");
const assertions_1 = require("aws-cdk-lib/assertions");
test('Test vpcEnabled setting that is disabled does not create stack', () => {
    const app = new aws_cdk_lib_1.App({
        context: {
            vpcEnabled: false
        }
    });
    const openSearchStacks = new stack_composer_1.StackComposer(app, {
        env: { account: "test-account", region: "us-east-1" }, stage: "unittest"
    });
    openSearchStacks.stacks.forEach(function (stack) {
        expect(!(stack instanceof network_stack_1.NetworkStack));
    });
});
test('Test vpcEnabled setting that is enabled without existing resources creates default VPC resources', () => {
    const app = new aws_cdk_lib_1.App({
        context: {
            vpcEnabled: true,
            // This setting could be left out, but provides clarity into the subnets for this test case
            availabilityZoneCount: 2
        }
    });
    const openSearchStacks = new stack_composer_1.StackComposer(app, {
        env: { account: "test-account", region: "us-east-1" }, stage: "unittest"
    });
    const networkStack = (openSearchStacks.stacks.filter((s) => s instanceof network_stack_1.NetworkStack)[0]);
    const networkTemplate = assertions_1.Template.fromStack(networkStack);
    networkTemplate.resourceCountIs("AWS::EC2::VPC", 1);
    networkTemplate.resourceCountIs("AWS::EC2::SecurityGroup", 1);
    // For each AZ, a private and public subnet is created
    networkTemplate.resourceCountIs("AWS::EC2::Subnet", 4);
    const securityGroups = networkStack.domainSecurityGroups;
    expect(securityGroups.length).toBe(1);
    const subnets = networkStack.domainSubnets;
    expect(subnets).toBe(undefined);
    const vpc = networkStack.vpc;
    expect(vpc.publicSubnets.length).toBe(2);
    expect(vpc.privateSubnets.length).toBe(2);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmV0d29yay1zdGFjay50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibmV0d29yay1zdGFjay50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsNkNBQWdDO0FBQ2hDLDBEQUFvRDtBQUNwRCx3REFBa0Q7QUFDbEQsdURBQWdEO0FBRWhELElBQUksQ0FBQyxnRUFBZ0UsRUFBRSxHQUFHLEVBQUU7SUFDeEUsTUFBTSxHQUFHLEdBQUcsSUFBSSxpQkFBRyxDQUFDO1FBQ2hCLE9BQU8sRUFBRTtZQUNMLFVBQVUsRUFBRSxLQUFLO1NBQ3BCO0tBQ0osQ0FBQyxDQUFBO0lBRUYsTUFBTSxnQkFBZ0IsR0FBRyxJQUFJLDhCQUFhLENBQUMsR0FBRyxFQUFFO1FBQzVDLEdBQUcsRUFBRSxFQUFDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBQyxFQUFFLEtBQUssRUFBRSxVQUFVO0tBQ3pFLENBQUMsQ0FBQTtJQUVGLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsVUFBUyxLQUFLO1FBQzFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxZQUFZLDRCQUFZLENBQUMsQ0FBQyxDQUFBO0lBQzVDLENBQUMsQ0FBQyxDQUFBO0FBRU4sQ0FBQyxDQUFDLENBQUE7QUFFRixJQUFJLENBQUMsa0dBQWtHLEVBQUUsR0FBRyxFQUFFO0lBQzFHLE1BQU0sR0FBRyxHQUFHLElBQUksaUJBQUcsQ0FBQztRQUNoQixPQUFPLEVBQUU7WUFDTCxVQUFVLEVBQUUsSUFBSTtZQUNoQiwyRkFBMkY7WUFDM0YscUJBQXFCLEVBQUUsQ0FBQztTQUMzQjtLQUNKLENBQUMsQ0FBQTtJQUVGLE1BQU0sZ0JBQWdCLEdBQUcsSUFBSSw4QkFBYSxDQUFDLEdBQUcsRUFBRTtRQUM1QyxHQUFHLEVBQUUsRUFBQyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUMsRUFBRSxLQUFLLEVBQUUsVUFBVTtLQUN6RSxDQUFDLENBQUE7SUFFRixNQUFNLFlBQVksR0FBaUIsQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLFlBQVksNEJBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFpQixDQUFBO0lBQ3hILE1BQU0sZUFBZSxHQUFHLHFCQUFRLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQyxDQUFBO0lBRXhELGVBQWUsQ0FBQyxlQUFlLENBQUMsZUFBZSxFQUFFLENBQUMsQ0FBQyxDQUFBO0lBQ25ELGVBQWUsQ0FBQyxlQUFlLENBQUMseUJBQXlCLEVBQUUsQ0FBQyxDQUFDLENBQUE7SUFDN0Qsc0RBQXNEO0lBQ3RELGVBQWUsQ0FBQyxlQUFlLENBQUMsa0JBQWtCLEVBQUUsQ0FBQyxDQUFDLENBQUE7SUFFdEQsTUFBTSxjQUFjLEdBQUcsWUFBWSxDQUFDLG9CQUFvQixDQUFBO0lBQ3hELE1BQU0sQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBQ3JDLE1BQU0sT0FBTyxHQUFHLFlBQVksQ0FBQyxhQUFhLENBQUE7SUFDMUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQTtJQUMvQixNQUFNLEdBQUcsR0FBRyxZQUFZLENBQUMsR0FBRyxDQUFBO0lBQzVCLE1BQU0sQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUN4QyxNQUFNLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUE7QUFDN0MsQ0FBQyxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0FwcH0gZnJvbSBcImF3cy1jZGstbGliXCI7XG5pbXBvcnQge1N0YWNrQ29tcG9zZXJ9IGZyb20gXCIuLi9saWIvc3RhY2stY29tcG9zZXJcIjtcbmltcG9ydCB7TmV0d29ya1N0YWNrfSBmcm9tIFwiLi4vbGliL25ldHdvcmstc3RhY2tcIjtcbmltcG9ydCB7VGVtcGxhdGV9IGZyb20gXCJhd3MtY2RrLWxpYi9hc3NlcnRpb25zXCI7XG5cbnRlc3QoJ1Rlc3QgdnBjRW5hYmxlZCBzZXR0aW5nIHRoYXQgaXMgZGlzYWJsZWQgZG9lcyBub3QgY3JlYXRlIHN0YWNrJywgKCkgPT4ge1xuICAgIGNvbnN0IGFwcCA9IG5ldyBBcHAoe1xuICAgICAgICBjb250ZXh0OiB7XG4gICAgICAgICAgICB2cGNFbmFibGVkOiBmYWxzZVxuICAgICAgICB9XG4gICAgfSlcblxuICAgIGNvbnN0IG9wZW5TZWFyY2hTdGFja3MgPSBuZXcgU3RhY2tDb21wb3NlcihhcHAsIHtcbiAgICAgICAgZW52OiB7YWNjb3VudDogXCJ0ZXN0LWFjY291bnRcIiwgcmVnaW9uOiBcInVzLWVhc3QtMVwifSwgc3RhZ2U6IFwidW5pdHRlc3RcIlxuICAgIH0pXG5cbiAgICBvcGVuU2VhcmNoU3RhY2tzLnN0YWNrcy5mb3JFYWNoKGZ1bmN0aW9uKHN0YWNrKSB7XG4gICAgICAgIGV4cGVjdCghKHN0YWNrIGluc3RhbmNlb2YgTmV0d29ya1N0YWNrKSlcbiAgICB9KVxuXG59KVxuXG50ZXN0KCdUZXN0IHZwY0VuYWJsZWQgc2V0dGluZyB0aGF0IGlzIGVuYWJsZWQgd2l0aG91dCBleGlzdGluZyByZXNvdXJjZXMgY3JlYXRlcyBkZWZhdWx0IFZQQyByZXNvdXJjZXMnLCAoKSA9PiB7XG4gICAgY29uc3QgYXBwID0gbmV3IEFwcCh7XG4gICAgICAgIGNvbnRleHQ6IHtcbiAgICAgICAgICAgIHZwY0VuYWJsZWQ6IHRydWUsXG4gICAgICAgICAgICAvLyBUaGlzIHNldHRpbmcgY291bGQgYmUgbGVmdCBvdXQsIGJ1dCBwcm92aWRlcyBjbGFyaXR5IGludG8gdGhlIHN1Ym5ldHMgZm9yIHRoaXMgdGVzdCBjYXNlXG4gICAgICAgICAgICBhdmFpbGFiaWxpdHlab25lQ291bnQ6IDJcbiAgICAgICAgfVxuICAgIH0pXG5cbiAgICBjb25zdCBvcGVuU2VhcmNoU3RhY2tzID0gbmV3IFN0YWNrQ29tcG9zZXIoYXBwLCB7XG4gICAgICAgIGVudjoge2FjY291bnQ6IFwidGVzdC1hY2NvdW50XCIsIHJlZ2lvbjogXCJ1cy1lYXN0LTFcIn0sIHN0YWdlOiBcInVuaXR0ZXN0XCJcbiAgICB9KVxuXG4gICAgY29uc3QgbmV0d29ya1N0YWNrOiBOZXR3b3JrU3RhY2sgPSAob3BlblNlYXJjaFN0YWNrcy5zdGFja3MuZmlsdGVyKChzKSA9PiBzIGluc3RhbmNlb2YgTmV0d29ya1N0YWNrKVswXSkgYXMgTmV0d29ya1N0YWNrXG4gICAgY29uc3QgbmV0d29ya1RlbXBsYXRlID0gVGVtcGxhdGUuZnJvbVN0YWNrKG5ldHdvcmtTdGFjaylcblxuICAgIG5ldHdvcmtUZW1wbGF0ZS5yZXNvdXJjZUNvdW50SXMoXCJBV1M6OkVDMjo6VlBDXCIsIDEpXG4gICAgbmV0d29ya1RlbXBsYXRlLnJlc291cmNlQ291bnRJcyhcIkFXUzo6RUMyOjpTZWN1cml0eUdyb3VwXCIsIDEpXG4gICAgLy8gRm9yIGVhY2ggQVosIGEgcHJpdmF0ZSBhbmQgcHVibGljIHN1Ym5ldCBpcyBjcmVhdGVkXG4gICAgbmV0d29ya1RlbXBsYXRlLnJlc291cmNlQ291bnRJcyhcIkFXUzo6RUMyOjpTdWJuZXRcIiwgNClcblxuICAgIGNvbnN0IHNlY3VyaXR5R3JvdXBzID0gbmV0d29ya1N0YWNrLmRvbWFpblNlY3VyaXR5R3JvdXBzXG4gICAgZXhwZWN0KHNlY3VyaXR5R3JvdXBzLmxlbmd0aCkudG9CZSgxKVxuICAgIGNvbnN0IHN1Ym5ldHMgPSBuZXR3b3JrU3RhY2suZG9tYWluU3VibmV0c1xuICAgIGV4cGVjdChzdWJuZXRzKS50b0JlKHVuZGVmaW5lZClcbiAgICBjb25zdCB2cGMgPSBuZXR3b3JrU3RhY2sudnBjXG4gICAgZXhwZWN0KHZwYy5wdWJsaWNTdWJuZXRzLmxlbmd0aCkudG9CZSgyKVxuICAgIGV4cGVjdCh2cGMucHJpdmF0ZVN1Ym5ldHMubGVuZ3RoKS50b0JlKDIpXG59KSJdfQ==