## 🧑‍💻 CDK Prompt (TypeScript)

> Design an AWS CDK stack in **TypeScript** that:
>
> 1. **Provisions an Amazon OpenSearch domain**:
>
>    * Deployed in a **public subnet** for easy access (test/dev use case)
>    * No Cognito, IAM auth, or fine-grained access control
>    * Includes OpenSearch Dashboards enabled and publicly accessible
>    * Uses minimal instance size (`t3.small.search`) for cost efficiency
>    * Single AZ and minimal nodes (1-2) is acceptable
> 2. **Sets up an EC2 instance** that:
>
>    * Runs in the same VPC
>    * Has CloudWatch Agent installed to push **system logs** (e.g., `/var/log/messages`) to **CloudWatch Logs**
>    * Can access OpenSearch Dashboards for manual log testing
> 3. **Forwards logs from CloudWatch Logs to OpenSearch** using:
>
>    * **CloudWatch Logs Subscription Filter**
>    * **Kinesis Data Firehose delivery stream**
>    * Firehose configured to deliver logs to OpenSearch
> 4. All resources should:
>
>    * Use **least privilege IAM roles** for EC2, Firehose, etc.
>    * Be tagged with `Project: LogPipeline`
>    * Be created inside a single AWS Region (e.g., `us-east-1`)
>
> Keep the CDK structure modular:
>
> * `OpensearchStack`: OpenSearch domain + Firehose delivery stream
> * `LoggingStack`: EC2 + CloudWatch Agent setup
> * Use environment variables or context for region/account separation
