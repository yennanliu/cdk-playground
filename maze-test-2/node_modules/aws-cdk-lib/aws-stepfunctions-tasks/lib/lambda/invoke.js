"use strict";var _a;Object.defineProperty(exports,"__esModule",{value:!0}),exports.LambdaInvocationType=exports.LambdaInvoke=void 0;var jsiiDeprecationWarnings=()=>{var tmp=require("../../../.warnings.jsii.js");return jsiiDeprecationWarnings=()=>tmp,tmp};const JSII_RTTI_SYMBOL_1=Symbol.for("jsii.rtti");var iam=()=>{var tmp=require("../../../aws-iam");return iam=()=>tmp,tmp},sfn=()=>{var tmp=require("../../../aws-stepfunctions");return sfn=()=>tmp,tmp},cdk=()=>{var tmp=require("../../../core");return cdk=()=>tmp,tmp},core_1=()=>{var tmp=require("../../../core");return core_1=()=>tmp,tmp},task_utils_1=()=>{var tmp=require("../private/task-utils");return task_utils_1=()=>tmp,tmp};class LambdaInvoke extends sfn().TaskStateBase{static jsonPath(scope,id,props){try{jsiiDeprecationWarnings().aws_cdk_lib_aws_stepfunctions_tasks_LambdaInvokeJsonPathProps(props)}catch(error){throw process.env.JSII_DEBUG!=="1"&&error.name==="DeprecationError"&&Error.captureStackTrace(error,this.jsonPath),error}return new LambdaInvoke(scope,id,props)}static jsonata(scope,id,props){try{jsiiDeprecationWarnings().aws_cdk_lib_aws_stepfunctions_tasks_LambdaInvokeJsonataProps(props)}catch(error){throw process.env.JSII_DEBUG!=="1"&&error.name==="DeprecationError"&&Error.captureStackTrace(error,this.jsonata),error}return new LambdaInvoke(scope,id,{...props,queryLanguage:sfn().QueryLanguage.JSONATA})}constructor(scope,id,props){super(scope,id,props),this.props=props;try{jsiiDeprecationWarnings().aws_cdk_lib_aws_stepfunctions_tasks_LambdaInvokeProps(props)}catch(error){throw process.env.JSII_DEBUG!=="1"&&error.name==="DeprecationError"&&Error.captureStackTrace(error,LambdaInvoke),error}if(this.integrationPattern=props.integrationPattern??sfn().IntegrationPattern.REQUEST_RESPONSE,(0,task_utils_1().validatePatternSupported)(this.integrationPattern,LambdaInvoke.SUPPORTED_INTEGRATION_PATTERNS),this.integrationPattern===sfn().IntegrationPattern.WAIT_FOR_TASK_TOKEN&&!sfn().FieldUtils.containsTaskToken(props.payload))throw new(core_1()).ValidationError("Task Token is required in `payload` for callback. Use JsonPath.taskToken to set the token.",this);if(props.payloadResponseOnly&&(props.integrationPattern||props.invocationType||props.clientContext||props.qualifier))throw new(core_1()).ValidationError("The 'payloadResponseOnly' property cannot be used if 'integrationPattern', 'invocationType', 'clientContext', or 'qualifier' are specified.",this);this.taskMetrics={metricPrefixSingular:"LambdaFunction",metricPrefixPlural:"LambdaFunctions",metricDimensions:{LambdaFunctionArn:this.props.lambdaFunction.functionArn,...this.props.qualifier&&{Qualifier:this.props.qualifier}}},this.taskPolicies=[new(iam()).PolicyStatement({resources:this.props.lambdaFunction.resourceArnsForGrantInvoke,actions:["lambda:InvokeFunction"]})],(props.retryOnServiceExceptions??!0)&&this.addRetry({errors:["Lambda.ClientExecutionTimeoutException","Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],interval:cdk().Duration.seconds(2),maxAttempts:6,backoffRate:2})}_renderTask(topLevelQueryLanguage){const queryLanguage=sfn()._getActualQueryLanguage(topLevelQueryLanguage,this.props.queryLanguage),[resource,paramOrArg]=this.props.payloadResponseOnly?[this.props.lambdaFunction.functionArn,this.props.payload?.value]:[(0,task_utils_1().integrationResourceArn)("lambda","invoke",this.integrationPattern),{FunctionName:this.props.lambdaFunction.functionArn,Payload:this.props.payload?.value??(queryLanguage===sfn().QueryLanguage.JSONATA?"{% $states.input %}":sfn().TaskInput.fromJsonPathAt("$").value),InvocationType:this.props.invocationType,ClientContext:this.props.clientContext,Qualifier:this.props.qualifier}];return{Resource:resource,...this._renderParametersOrArguments(paramOrArg,queryLanguage)}}}exports.LambdaInvoke=LambdaInvoke,_a=JSII_RTTI_SYMBOL_1,LambdaInvoke[_a]={fqn:"aws-cdk-lib.aws_stepfunctions_tasks.LambdaInvoke",version:"2.197.0"},LambdaInvoke.SUPPORTED_INTEGRATION_PATTERNS=[sfn().IntegrationPattern.REQUEST_RESPONSE,sfn().IntegrationPattern.WAIT_FOR_TASK_TOKEN];var LambdaInvocationType;(function(LambdaInvocationType2){LambdaInvocationType2.REQUEST_RESPONSE="RequestResponse",LambdaInvocationType2.EVENT="Event",LambdaInvocationType2.DRY_RUN="DryRun"})(LambdaInvocationType||(exports.LambdaInvocationType=LambdaInvocationType={}));
