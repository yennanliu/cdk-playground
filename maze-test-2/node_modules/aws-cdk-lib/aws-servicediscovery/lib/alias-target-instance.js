"use strict";var __decorate=exports&&exports.__decorate||function(decorators,target,key,desc){var c=arguments.length,r=c<3?target:desc===null?desc=Object.getOwnPropertyDescriptor(target,key):desc,d;if(typeof Reflect=="object"&&typeof Reflect.decorate=="function")r=Reflect.decorate(decorators,target,key,desc);else for(var i=decorators.length-1;i>=0;i--)(d=decorators[i])&&(r=(c<3?d(r):c>3?d(target,key,r):d(target,key))||r);return c>3&&r&&Object.defineProperty(target,key,r),r},_a;Object.defineProperty(exports,"__esModule",{value:!0}),exports.AliasTargetInstance=void 0;var jsiiDeprecationWarnings=()=>{var tmp=require("../../.warnings.jsii.js");return jsiiDeprecationWarnings=()=>tmp,tmp};const JSII_RTTI_SYMBOL_1=Symbol.for("jsii.rtti");var instance_1=()=>{var tmp=require("./instance");return instance_1=()=>tmp,tmp},namespace_1=()=>{var tmp=require("./namespace");return namespace_1=()=>tmp,tmp},service_1=()=>{var tmp=require("./service");return service_1=()=>tmp,tmp},servicediscovery_generated_1=()=>{var tmp=require("./servicediscovery.generated");return servicediscovery_generated_1=()=>tmp,tmp},core_1=()=>{var tmp=require("../../core");return core_1=()=>tmp,tmp},metadata_resource_1=()=>{var tmp=require("../../core/lib/metadata-resource");return metadata_resource_1=()=>tmp,tmp},prop_injectable_1=()=>{var tmp=require("../../core/lib/prop-injectable");return prop_injectable_1=()=>tmp,tmp};let AliasTargetInstance=class AliasTargetInstance2 extends instance_1().InstanceBase{constructor(scope,id,props){super(scope,id);try{jsiiDeprecationWarnings().aws_cdk_lib_aws_servicediscovery_AliasTargetInstanceProps(props)}catch(error){throw process.env.JSII_DEBUG!=="1"&&error.name==="DeprecationError"&&Error.captureStackTrace(error,AliasTargetInstance2),error}if((0,metadata_resource_1().addConstructMetadata)(this,props),props.service.namespace.type===namespace_1().NamespaceType.HTTP)throw new(core_1()).ValidationError("Namespace associated with Service must be a DNS Namespace.",this);const dnsRecordType=props.service.dnsRecordType;if(dnsRecordType!==service_1().DnsRecordType.A&&dnsRecordType!==service_1().DnsRecordType.AAAA&&dnsRecordType!==service_1().DnsRecordType.A_AAAA)throw new(core_1()).ValidationError("Service must use `A` or `AAAA` records to register an AliasRecordTarget.",this);if(props.service.routingPolicy!==service_1().RoutingPolicy.WEIGHTED)throw new(core_1()).ValidationError("Service must use `WEIGHTED` routing policy.",this);const resource=new(servicediscovery_generated_1()).CfnInstance(this,"Resource",{instanceAttributes:{AWS_ALIAS_DNS_NAME:props.dnsName,...props.customAttributes},instanceId:props.instanceId||core_1().Names.uniqueId(this),serviceId:props.service.serviceId});this.service=props.service,this.instanceId=resource.ref,this.dnsName=props.dnsName}};exports.AliasTargetInstance=AliasTargetInstance,_a=JSII_RTTI_SYMBOL_1,AliasTargetInstance[_a]={fqn:"aws-cdk-lib.aws_servicediscovery.AliasTargetInstance",version:"2.197.0"},AliasTargetInstance.PROPERTY_INJECTION_ID="aws-cdk-lib.aws-servicediscovery.AliasTargetInstance",exports.AliasTargetInstance=AliasTargetInstance=__decorate([prop_injectable_1().propertyInjectable],AliasTargetInstance);
