"use strict";var __decorate=exports&&exports.__decorate||function(decorators,target,key,desc){var c=arguments.length,r=c<3?target:desc===null?desc=Object.getOwnPropertyDescriptor(target,key):desc,d;if(typeof Reflect=="object"&&typeof Reflect.decorate=="function")r=Reflect.decorate(decorators,target,key,desc);else for(var i=decorators.length-1;i>=0;i--)(d=decorators[i])&&(r=(c<3?d(r):c>3?d(target,key,r):d(target,key))||r);return c>3&&r&&Object.defineProperty(target,key,r),r},_a;Object.defineProperty(exports,"__esModule",{value:!0}),exports.DomainName=exports.EndpointType=exports.SecurityPolicy=void 0;var jsiiDeprecationWarnings=()=>{var tmp=require("../../../.warnings.jsii.js");return jsiiDeprecationWarnings=()=>tmp,tmp};const JSII_RTTI_SYMBOL_1=Symbol.for("jsii.rtti");var index_1=()=>{var tmp=require(".././index");return index_1=()=>tmp,tmp},core_1=()=>{var tmp=require("../../../core");return core_1=()=>tmp,tmp},errors_1=()=>{var tmp=require("../../../core/lib/errors");return errors_1=()=>tmp,tmp},metadata_resource_1=()=>{var tmp=require("../../../core/lib/metadata-resource");return metadata_resource_1=()=>tmp,tmp},prop_injectable_1=()=>{var tmp=require("../../../core/lib/prop-injectable");return prop_injectable_1=()=>tmp,tmp},SecurityPolicy;(function(SecurityPolicy2){SecurityPolicy2.TLS_1_0="TLS_1_0",SecurityPolicy2.TLS_1_2="TLS_1_2"})(SecurityPolicy||(exports.SecurityPolicy=SecurityPolicy={}));var EndpointType;(function(EndpointType2){EndpointType2.EDGE="EDGE",EndpointType2.REGIONAL="REGIONAL"})(EndpointType||(exports.EndpointType=EndpointType={}));let DomainName=class DomainName2 extends core_1().Resource{static fromDomainNameAttributes(scope,id,attrs){try{jsiiDeprecationWarnings().aws_cdk_lib_aws_apigatewayv2_DomainNameAttributes(attrs)}catch(error){throw process.env.JSII_DEBUG!=="1"&&error.name==="DeprecationError"&&Error.captureStackTrace(error,this.fromDomainNameAttributes),error}class Import extends core_1().Resource{constructor(){super(...arguments),this.regionalDomainName=attrs.regionalDomainName,this.regionalHostedZoneId=attrs.regionalHostedZoneId,this.name=attrs.name}}return new Import(scope,id)}constructor(scope,id,props){super(scope,id),this.domainNameConfigurations=[];try{jsiiDeprecationWarnings().aws_cdk_lib_aws_apigatewayv2_DomainNameProps(props)}catch(error){throw process.env.JSII_DEBUG!=="1"&&error.name==="DeprecationError"&&Error.captureStackTrace(error,DomainName2),error}if((0,metadata_resource_1().addConstructMetadata)(this,props),props.domainName==="")throw new(errors_1()).ValidationError("empty string for domainName not allowed",scope);if(props.ownershipCertificate&&!props.mtls)throw new(errors_1()).ValidationError("ownership certificate can only be used with mtls domains",scope);const mtlsConfig=this.configureMTLS(props.mtls),domainNameProps={domainName:props.domainName,domainNameConfigurations:core_1().Lazy.any({produce:()=>this.domainNameConfigurations}),mutualTlsAuthentication:mtlsConfig},resource=new(index_1()).CfnDomainName(this,"Resource",domainNameProps);this.name=resource.ref,this.regionalDomainName=core_1().Token.asString(resource.getAtt("RegionalDomainName")),this.regionalHostedZoneId=core_1().Token.asString(resource.getAtt("RegionalHostedZoneId")),props.certificate&&this.addEndpoint(props)}configureMTLS(mtlsConfig){if(mtlsConfig)return{truststoreUri:mtlsConfig.bucket.s3UrlForObject(mtlsConfig.key),truststoreVersion:mtlsConfig.version}}addEndpoint(options){try{jsiiDeprecationWarnings().aws_cdk_lib_aws_apigatewayv2_EndpointOptions(options)}catch(error){throw process.env.JSII_DEBUG!=="1"&&error.name==="DeprecationError"&&Error.captureStackTrace(error,this.addEndpoint),error}const domainNameConfig={certificateArn:options.certificate.certificateArn,certificateName:options.certificateName,endpointType:options.endpointType?options.endpointType?.toString():"REGIONAL",ownershipVerificationCertificateArn:options.ownershipCertificate?.certificateArn,securityPolicy:options.securityPolicy?.toString(),ipAddressType:options.ipAddressType};this.validateEndpointType(domainNameConfig.endpointType),this.domainNameConfigurations.push(domainNameConfig)}validateEndpointType(endpointType){for(let config of this.domainNameConfigurations)if(endpointType&&endpointType==config.endpointType)throw new(errors_1()).ValidationError(`an endpoint with type ${endpointType} already exists`,this)}};exports.DomainName=DomainName,_a=JSII_RTTI_SYMBOL_1,DomainName[_a]={fqn:"aws-cdk-lib.aws_apigatewayv2.DomainName",version:"2.197.0"},DomainName.PROPERTY_INJECTION_ID="aws-cdk-lib.aws-apigatewayv2.DomainName",__decorate([(0,metadata_resource_1().MethodMetadata)()],DomainName.prototype,"addEndpoint",null),exports.DomainName=DomainName=__decorate([prop_injectable_1().propertyInjectable],DomainName);
