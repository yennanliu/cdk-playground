"use strict";var __decorate=exports&&exports.__decorate||function(decorators,target,key,desc){var c=arguments.length,r=c<3?target:desc===null?desc=Object.getOwnPropertyDescriptor(target,key):desc,d;if(typeof Reflect=="object"&&typeof Reflect.decorate=="function")r=Reflect.decorate(decorators,target,key,desc);else for(var i=decorators.length-1;i>=0;i--)(d=decorators[i])&&(r=(c<3?d(r):c>3?d(target,key,r):d(target,key))||r);return c>3&&r&&Object.defineProperty(target,key,r),r},_a;Object.defineProperty(exports,"__esModule",{value:!0}),exports.MetricFilter=void 0;var jsiiDeprecationWarnings=()=>{var tmp=require("../../.warnings.jsii.js");return jsiiDeprecationWarnings=()=>tmp,tmp};const JSII_RTTI_SYMBOL_1=Symbol.for("jsii.rtti");var logs_generated_1=()=>{var tmp=require("./logs.generated");return logs_generated_1=()=>tmp,tmp},aws_cloudwatch_1=()=>{var tmp=require("../../aws-cloudwatch");return aws_cloudwatch_1=()=>tmp,tmp},core_1=()=>{var tmp=require("../../core");return core_1=()=>tmp,tmp},metadata_resource_1=()=>{var tmp=require("../../core/lib/metadata-resource");return metadata_resource_1=()=>tmp,tmp},prop_injectable_1=()=>{var tmp=require("../../core/lib/prop-injectable");return prop_injectable_1=()=>tmp,tmp};let MetricFilter=class MetricFilter2 extends core_1().Resource{constructor(scope,id,props){super(scope,id,{physicalName:props.filterName});try{jsiiDeprecationWarnings().aws_cdk_lib_aws_logs_MetricFilterProps(props)}catch(error){throw process.env.JSII_DEBUG!=="1"&&error.name==="DeprecationError"&&Error.captureStackTrace(error,MetricFilter2),error}(0,metadata_resource_1().addConstructMetadata)(this,props),this.metricName=props.metricName,this.metricNamespace=props.metricNamespace;const numberOfDimensions=Object.keys(props.dimensions??{}).length;if(numberOfDimensions>3)throw new(core_1()).ValidationError(`MetricFilter only supports a maximum of 3 dimensions but received ${numberOfDimensions}.`,this);new(logs_generated_1()).CfnMetricFilter(this,"Resource",{logGroupName:props.logGroup.logGroupName,filterName:this.physicalName,filterPattern:props.filterPattern.logPatternString,metricTransformations:[{metricNamespace:props.metricNamespace,metricName:props.metricName,metricValue:props.metricValue??"1",defaultValue:props.defaultValue,dimensions:props.dimensions?Object.entries(props.dimensions).map(([key,value])=>({key,value})):void 0,unit:props.unit}]})}metric(props){try{jsiiDeprecationWarnings().aws_cdk_lib_aws_cloudwatch_MetricOptions(props)}catch(error){throw process.env.JSII_DEBUG!=="1"&&error.name==="DeprecationError"&&Error.captureStackTrace(error,this.metric),error}return new(aws_cloudwatch_1()).Metric({metricName:this.metricName,namespace:this.metricNamespace,statistic:"avg",...props}).attachTo(this)}};exports.MetricFilter=MetricFilter,_a=JSII_RTTI_SYMBOL_1,MetricFilter[_a]={fqn:"aws-cdk-lib.aws_logs.MetricFilter",version:"2.197.0"},MetricFilter.PROPERTY_INJECTION_ID="aws-cdk-lib.aws-logs.MetricFilter",__decorate([(0,metadata_resource_1().MethodMetadata)()],MetricFilter.prototype,"metric",null),exports.MetricFilter=MetricFilter=__decorate([prop_injectable_1().propertyInjectable],MetricFilter);
