"use strict";var __decorate=exports&&exports.__decorate||function(decorators,target,key,desc){var c=arguments.length,r=c<3?target:desc===null?desc=Object.getOwnPropertyDescriptor(target,key):desc,d;if(typeof Reflect=="object"&&typeof Reflect.decorate=="function")r=Reflect.decorate(decorators,target,key,desc);else for(var i=decorators.length-1;i>=0;i--)(d=decorators[i])&&(r=(c<3?d(r):c>3?d(target,key,r):d(target,key))||r);return c>3&&r&&Object.defineProperty(target,key,r),r},_a;Object.defineProperty(exports,"__esModule",{value:!0}),exports.CustomResource=void 0;var jsiiDeprecationWarnings=()=>{var tmp=require("../../.warnings.jsii.js");return jsiiDeprecationWarnings=()=>tmp,tmp};const JSII_RTTI_SYMBOL_1=Symbol.for("jsii.rtti");var annotations_1=()=>{var tmp=require("./annotations");return annotations_1=()=>tmp,tmp},cfn_resource_1=()=>{var tmp=require("./cfn-resource");return cfn_resource_1=()=>tmp,tmp},metadata_resource_1=()=>{var tmp=require("./metadata-resource");return metadata_resource_1=()=>tmp,tmp},prop_injectable_1=()=>{var tmp=require("./prop-injectable");return prop_injectable_1=()=>tmp,tmp},removal_policy_1=()=>{var tmp=require("./removal-policy");return removal_policy_1=()=>tmp,tmp},resource_1=()=>{var tmp=require("./resource");return resource_1=()=>tmp,tmp},token_1=()=>{var tmp=require("./token");return token_1=()=>tmp,tmp};let CustomResource=class CustomResource2 extends resource_1().Resource{constructor(scope,id,props){super(scope,id);try{jsiiDeprecationWarnings().aws_cdk_lib_CustomResourceProps(props)}catch(error){throw process.env.JSII_DEBUG!=="1"&&error.name==="DeprecationError"&&Error.captureStackTrace(error,CustomResource2),error}(0,metadata_resource_1().addConstructMetadata)(this,props);const type=renderResourceType(props.resourceType),properties=props.pascalCaseProperties??!1?uppercaseProperties(props.properties||{}):props.properties||{};if(props.serviceTimeout!==void 0&&!props.serviceTimeout.isUnresolved()){const serviceTimeoutSeconds=props.serviceTimeout.toSeconds();if(serviceTimeoutSeconds<1||serviceTimeoutSeconds>3600)throw new Error(`serviceTimeout must either be between 1 and 3600 seconds, got ${serviceTimeoutSeconds}`)}const constructPropertiesPassed={ServiceToken:props.serviceToken,ServiceTimeout:props.serviceTimeout?.toSeconds().toString()};Object.keys(properties).some(key=>key in constructPropertiesPassed)&&annotations_1().Annotations.of(this).addWarningV2("@aws-cdk/core:customResourcePropConflict",`The following keys will be overwritten as they exist in the 'properties' prop. Keys found: ${Object.keys(properties).filter(key=>key in constructPropertiesPassed)}`),this.resource=new(cfn_resource_1()).CfnResource(this,"Default",{type,properties:{...constructPropertiesPassed,...properties}}),this.resource.applyRemovalPolicy(props.removalPolicy,{default:removal_policy_1().RemovalPolicy.DESTROY})}get ref(){return this.resource.ref}getAtt(attributeName){return this.resource.getAtt(attributeName)}getAttString(attributeName){return token_1().Token.asString(this.getAtt(attributeName))}};exports.CustomResource=CustomResource,_a=JSII_RTTI_SYMBOL_1,CustomResource[_a]={fqn:"aws-cdk-lib.CustomResource",version:"2.197.0"},CustomResource.PROPERTY_INJECTION_ID="aws-cdk-lib.core.CustomResource",__decorate([(0,metadata_resource_1().MethodMetadata)()],CustomResource.prototype,"getAtt",null),__decorate([(0,metadata_resource_1().MethodMetadata)()],CustomResource.prototype,"getAttString",null),exports.CustomResource=CustomResource=__decorate([prop_injectable_1().propertyInjectable],CustomResource);function uppercaseProperties(props){const ret={};return Object.keys(props).forEach(key=>{const upper=key.slice(0,1).toUpperCase()+key.slice(1);ret[upper]=props[key]}),ret}function renderResourceType(resourceType){if(!resourceType)return"AWS::CloudFormation::CustomResource";if(!resourceType.startsWith("Custom::"))throw new Error(`Custom resource type must begin with "Custom::" (${resourceType})`);if(resourceType.length>60)throw new Error(`Custom resource type length > 60 (${resourceType})`);const typeName=resourceType.slice(resourceType.indexOf("::")+2);if(!/^[a-z0-9_@-]+$/i.test(typeName))throw new Error(`Custom resource type name can only include alphanumeric characters and _@- (${typeName})`);return resourceType}
